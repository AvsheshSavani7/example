"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.Layer = exports.DynamicConfig = void 0;
var DynamicConfig_1 = __importDefault(require("./DynamicConfig"));
exports.DynamicConfig = DynamicConfig_1["default"];
var Errors_1 = require("./Errors");
var Layer_1 = __importDefault(require("./Layer"));
exports.Layer = Layer_1["default"];
var StatsigServer_1 = __importDefault(require("./StatsigServer"));
var Statsig = {
    _instance: null,
    initialize: function (secretKey, options) {
        var _a;
        if (options === void 0) { options = {}; }
        var inst = (_a = Statsig._instance) !== null && _a !== void 0 ? _a : new StatsigServer_1["default"](secretKey, options);
        if (Statsig._instance == null) {
            Statsig._instance = inst;
        }
        return inst.initializeAsync();
    },
    checkGate: function (user, gateName) {
        return this._enforceServer().checkGate(user, gateName);
    },
    checkGateWithExposureLoggingDisabled: function (user, gateName) {
        return this._enforceServer().checkGateWithExposureLoggingDisabled(user, gateName);
    },
    manuallyLogGateExposure: function (user, gateName) {
        return this._enforceServer().logGateExposure(user, gateName);
    },
    getConfig: function (user, configName) {
        return this._enforceServer().getConfig(user, configName);
    },
    getConfigWithExposureLoggingDisabled: function (user, configName) {
        return this._enforceServer().getConfigWithExposureLoggingDisabled(user, configName);
    },
    manuallyLogConfigExposure: function (user, configName) {
        return this._enforceServer().logConfigExposure(user, configName);
    },
    getExperiment: function (user, experimentName) {
        return this._enforceServer().getExperiment(user, experimentName);
    },
    getExperimentWithExposureLoggingDisabled: function (user, experimentName) {
        return this._enforceServer().getExperimentWithExposureLoggingDisabled(user, experimentName);
    },
    manuallyLogExperimentExposure: function (user, experimentName) {
        return this._enforceServer().logExperimentExposure(user, experimentName);
    },
    getLayer: function (user, layerName) {
        return this._enforceServer().getLayer(user, layerName);
    },
    getLayerWithExposureLoggingDisabled: function (user, layerName) {
        return this._enforceServer().getLayerWithExposureLoggingDisabled(user, layerName);
    },
    manuallyLogLayerParameterExposure: function (user, layerName, parameterName) {
        this._enforceServer().logLayerParameterExposure(user, layerName, parameterName);
    },
    logEvent: function (user, eventName, value, metadata) {
        if (value === void 0) { value = null; }
        if (metadata === void 0) { metadata = null; }
        this._enforceServer().logEvent(user, eventName, value, metadata);
    },
    logEventObject: function (eventObject) {
        this._enforceServer().logEventObject(eventObject);
    },
    shutdown: function () {
        this._enforceServer().shutdown();
    },
    getClientInitializeResponse: function (user) {
        return this._enforceServer().getClientInitializeResponse(user);
    },
    overrideGate: function (gateName, value, userID) {
        if (userID === void 0) { userID = ''; }
        this._enforceServer().overrideGate(gateName, value, userID);
    },
    overrideConfig: function (configName, value, userID) {
        if (userID === void 0) { userID = ''; }
        this._enforceServer().overrideConfig(configName, value, userID);
    },
    overrideLayer: function (layerName, value, userID) {
        if (userID === void 0) { userID = ''; }
        this._enforceServer().overrideLayer(layerName, value, userID);
    },
    flush: function () {
        var inst = Statsig._instance;
        if (inst == null) {
            return Promise.resolve();
        }
        return inst.flush();
    },
    _enforceServer: function () {
        if (Statsig._instance == null) {
            throw new Errors_1.StatsigUninitializedError();
        }
        return Statsig._instance;
    }
};
exports["default"] = Statsig;
module.exports = Statsig;
