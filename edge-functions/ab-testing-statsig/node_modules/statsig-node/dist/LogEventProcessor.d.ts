import LogEvent from './LogEvent';
import { StatsigUser } from './StatsigUser';
import ConfigEvaluation from './ConfigEvaluation';
import StatsigFetcher from './utils/StatsigFetcher';
import { ExplicitStatsigOptions } from './StatsigOptions';
export default class LogEventProcessor {
    private options;
    private fetcher;
    private queue;
    private flushTimer;
    private loggedErrors;
    private deduper;
    private deduperTimer;
    constructor(fetcher: StatsigFetcher, options: ExplicitStatsigOptions);
    log(event: LogEvent, errorKey?: string | null): void;
    flush(fireAndForget?: boolean): Promise<void>;
    shutdown(): Promise<void>;
    logStatsigInternal(user: StatsigUser | null, eventName: string, metadata: Record<string, unknown> | null, secondaryExposures?: Record<string, unknown>[] | null): void;
    logGateExposure(user: StatsigUser, gateName: string, evaluation: ConfigEvaluation, isManualExposure: boolean): void;
    logConfigExposure(user: StatsigUser, configName: string, evaluation: ConfigEvaluation, isManualExposure: boolean): void;
    logLayerExposure(user: StatsigUser, layerName: string, parameterName: string, evaluation: ConfigEvaluation, isManualExposure: boolean): void;
    private maybeAddManualExposureFlagToMetadata;
    private safeAddEvaulationDetailsToEvent;
    private isUniqueExposure;
}
