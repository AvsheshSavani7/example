import { ConfigSpec } from './ConfigSpec';
import { EvaluationReason } from './EvaluationDetails';
import { ExplicitStatsigOptions } from './StatsigOptions';
import { IDList } from './utils/IDListUtil';
import StatsigFetcher from './utils/StatsigFetcher';
export declare type ConfigStore = {
    gates: Record<string, ConfigSpec>;
    configs: Record<string, ConfigSpec>;
    idLists: Record<string, IDList>;
    layers: Record<string, ConfigSpec>;
    experimentToLayer: Record<string, string>;
};
export default class SpecStore {
    private initReason;
    private api;
    private rulesUpdatedCallback;
    private initialUpdateTime;
    private lastUpdateTime;
    private store;
    private syncInterval;
    private idListSyncInterval;
    private initialized;
    private syncTimer;
    private idListsSyncTimer;
    private fetcher;
    private dataAdapter;
    private syncFailureCount;
    private lastDownloadConfigSpecsSyncTime;
    constructor(fetcher: StatsigFetcher, options: ExplicitStatsigOptions);
    getInitReason(): EvaluationReason;
    getInitialUpdateTime(): number;
    getLastUpdateTime(): number;
    getGate(gateName: string): ConfigSpec | null;
    getConfig(configName: string): ConfigSpec | null;
    getLayer(layerName: string): ConfigSpec | null;
    getExperimentLayer(experimentName: string): string | null;
    getIDList(listName: string): IDList | null;
    getAllGates(): Record<string, ConfigSpec>;
    getAllConfigs(): Record<string, ConfigSpec>;
    getAllLayers(): Record<string, ConfigSpec>;
    init(): Promise<void>;
    resetSyncTimerIfExited(): Error | null;
    isServingChecks(): boolean;
    private _fetchConfigSpecsFromServer;
    private _fetchConfigSpecsFromAdapter;
    private _saveConfigSpecsToAdapter;
    private pollForUpdates;
    private _syncValues;
    private _syncIdLists;
    private _process;
    /**
     * Returns a reverse mapping of layers to experiment (or vice versa)
     */
    private _reverseLayerExperimentMapping;
    private syncIdListsFromDataAdapter;
    private syncIdListsFromNetwork;
    shutdown(): void;
    private clearTimers;
    private setInitialUpdateTime;
}
